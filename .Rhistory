legend(4000, 0.3, legend=c("HR_Neg", "HR_ASD","Total"), col=c("red","green",
"black"),cex=0.8,lty=1)
# Find stable value
rle_wholedata <- rle(RF_ASD_test$err.rate[,"OOB"])
rle_wholedata_lengths <- rle_wholedata$lengths
rle_wholedata_lengths_srt <- sort(rle_wholedata$lengths, decreasing=TRUE)
longest_string_wholedata <-
which(rle_wholedata_lengths==rle_wholedata_lengths_srt[1])
# Set number of trees
stable_tree_no_wholedata <- sum(rle_wholedata_lengths[1:longest_string_wholedata-1])+1
## Find number of predictors at each split
# Do same error analysis as before
max_num_pred <- 15
oob.err_2=matrix(NA,max_num_pred,3); colnames(oob.err_2) <- c("OOB","HR_Neg", "HR_ASD")
for(mtry in 1:max_num_pred)
{
rf=randomForest(rf_fyi_formula, data=dataset_HR_RF_SMOTE,mtry=mtry,
ntree=stable_tree_no_wholedata)
oob.err_2[mtry,] = rf$err.rate[stable_tree_no_wholedata,] #Error of all Trees fitted
# cat(mtry," ") #printing the output to the console
}
# Find which mtry produced lowest pred. error in test set
mintest_OOB_wholedata <- which(oob.err_2[,"OOB"]==min(oob.err_2[,"OOB"]))
print("Error rates in OOB set")
oob.err_2[mintest_OOB_wholedata,] # same Neg error, take smallest
## Generate final RF algorthim
rf_ASD_final <- randomForest(rf_fyi_formula,
data=dataset_HR_RF_SMOTE,
ntree=stable_tree_no_wholedata,
mtry=mintest_OOB_wholedata)
# Training set performance
rf_ASD_final
var_importance <- as.matrix(rf_ASD_final$importance[order(rf_ASD_final$importance,decreasing = T),])
variables_importance_rank <- rownames(var_importance)
# Save algorithm as a function to allow prediction using any (correctly formatted) dataset
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
# Save algorthim itself as object
save(rf_ASD_final, file = "rf_ASD_final.RData")
# Save SMOTE dataset for reproducibility
save(dataset_HR_RF_SMOTE, file="dataset_HR_RF_SMOTE.RData")
# Get predictions on smote dataset to make sure function works
smote_rf_train_obj <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
# Save algorthim itself as object
save(rf_ASD_final, file = "rf_ASD_final.RData")
# Save SMOTE dataset for reproducibility
save(dataset_HR_RF_SMOTE, file="dataset_HR_RF_SMOTE.RData")
# Get predictions on smote dataset to make sure function works
smote_rf_train_obj <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
smote_rf_train_obj$rf_confusion_matrix
dim(dataset_HR_RF)
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF, thres=0.5)
rf_ASD_predict <- function(dataset, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
dataset_HR_RF
dataset = dataset_HR_RF
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
rf_predict_probs
rf_predict_probs <- predict(rf_ASD_final, newdata=dataset, type = "prob")
rf_predict_probs
thres
thres="best"
rf_predict_probs <- predict(rf_ASD_final, newdata=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD")
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
data_jessica$rf_confusion_matrix
dataset_HR_RF_SMOTE
data_jessica$rf_confusion_matrix
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF, thres=0.5)
dataset=dataset_HR_RF
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
rf_predict_probs[,2]
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, newdata=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF, thres=0.5)
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF, thres=0.5)
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
# Save algorthim itself as object
save(rf_ASD_final, file = "rf_ASD_final.RData")
# Save SMOTE dataset for reproducibility
save(dataset_HR_RF_SMOTE, file="dataset_HR_RF_SMOTE.RData")
# Get predictions on smote dataset to make sure function works
smote_rf_train_obj <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
# Get predictions on dataset w/o SMOTE for Jessica
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF, thres=0.5)
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- randomForest::predict(rf_ASD_final,
data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
# Save algorthim itself as object
save(rf_ASD_final, file = "rf_ASD_final.RData")
# Save SMOTE dataset for reproducibility
save(dataset_HR_RF_SMOTE, file="dataset_HR_RF_SMOTE.RData")
# Get predictions on smote dataset to make sure function works
smote_rf_train_obj <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
rf_ASD_predict <- function(dataset=dataset_HR_RF_SMOTE, thres="best"){
rf_predict_probs <- predict(rf_ASD_final, data=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD"),
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
return(output)
}
# Save algorthim itself as object
save(rf_ASD_final, file = "rf_ASD_final.RData")
# Save SMOTE dataset for reproducibility
save(dataset_HR_RF_SMOTE, file="dataset_HR_RF_SMOTE.RData")
# Get predictions on smote dataset to make sure function works
smote_rf_train_obj <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
# Get predictions on dataset w/o SMOTE for Jessica
data_jessica <- rf_ASD_predict(dataset=dataset_HR_RF_SMOTE, thres=0.5)
dataset=dataset_HR_RF_SMOTE
thres="best"
rf_predict_probs <- predict(rf_ASD_final, newdata=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres[1],
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
confusionMatrix(data=rf_predict_classes,
reference=eval(parse(text=dataset_string)),
positive="HR_ASD")
best_rf_thres
best_rf_thres[1]
best_rf_thres
rf_predict_probs <- predict(rf_ASD_final, newdata=dataset, type = "prob")
dataset_string <- paste("dataset", "$", "Groups_2", sep="")
rf_predict_roc <- roc(response=eval(parse(text=dataset_string)),
predictor=rf_predict_probs[,2])
if(thres=="best"){
best_rf_thres <- coords(rf_predict_roc,
x="best", ret="threshold",
best.method = "closest.topleft")
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(best_rf_thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}else{
rf_predict_classes <- factor(ifelse(rf_predict_probs[,2]>
rep(thres,
length(rf_predict_probs[,2])),
"HR_ASD", "HR_Neg"))
}
output <- list("rf_predicted_probabilities" = rf_predict_probs, "rf_predicted_classes" = rf_predict_classes,
"rf_confusion_matrix" = ,
"rf_roc_object" = rf_predict_roc, "rf_auc" = pROC::auc(rf_predict_roc),
"rf_roc_plot" = plot(rf_predict_roc))
rf_predict_classes
rf_predict_probs
rf_predict_classes
dataset=dataset_HR_RF_SMOTE
rf_ASD_final
rf_predict_probs <- predict(rf_ASD_final, dataset, type = "prob")
rf_predict_probs
rf_ASD_final
rf_ASD_final$predicted
rf_ASD_final$votes
predict(rf_ASD_final, dataset, type = "prob",
norm.votes = FALSE)
RF_Group_2_ALLQs_ROC_CV <- list()
RF_confmatrix_CV <- list()
RF_summary_results_CV <- list()
RF_accuracy_CV <- list()
RF_AUC_CV <- list()
fold_ASD_counts <- list()
RF_confmatrix_CV_NoAtyp <- list()
RF_summary_results_CV_NoAtyp <- list()
RF_confmatrix_CV_NoTyp <- list()
RF_summary_results_CV_NoTyp<- list()
boots <- 50
fold_num <- 5
dataset_HR_CV <- dataset_HR
i=1
j=1
RNGkind(sample.kind = "Rounding")
set.seed(i)
## Create folds
folds <- createFolds(dataset_HR_CV$Groups_2, k=fold_num, list=F)
dataset_HR_CV$fold <- folds
# Check proportions:
# plyr::ddply(dataset_HR_CV, 'fold', summarise, prop=mean(as.numeric(Groups_2)-1))
print(j)
dataset_valid_2 <- dataset_HR_CV %>% filter(fold==j) %>% select(Groups, Groups_2,
FYIq_1:FYIq_60)
dataset_test_2 <- dataset_HR_CV %>% filter(fold!=j) %>% select(Groups_2,
FYIq_1:FYIq_60)
RNGkind(sample.kind = "Rounding")
set.seed(012)
dataset_test_2_SMOTE <- as_tibble(DMwR::SMOTE(Groups_2~.,
data=data.frame(dataset_test_2),
perc.over = 200,
k=5,
learner = NULL))
ftable(dataset_test_2_SMOTE$Groups_2)
CV_rf <- randomForest(Groups_2~., data=dataset_test_2_SMOTE, ntree=5000)
# Find stable value
rle_cv <- rle(CV_rf$err.rate[,"OOB"])
rle_cv_lengths <- rle_cv$lengths
rle_cv_lengths_srt <- sort(rle_cv_lengths, decreasing=TRUE)
longest_string_cv <-
which(rle_cv_lengths==rle_cv_lengths_srt[1])
# Set number of trees
stable_tree_no_cv <- sum(rle_cv_lengths[1:longest_string_cv-1])+1
## Find number of predictors at each split
# Do same error analysis as before
oob.err_cv=matrix(NA,max_num_pred,3); colnames(oob.err_cv) <- c("OOB","HR_Neg", "HR_ASD")
for(mtry in 1:max_num_pred)
{
rf=randomForest(Groups_2~., data=dataset_test_2_SMOTE,mtry=mtry,
ntree=stable_tree_no_cv)
oob.err_cv[mtry,] = rf$err.rate[stable_tree_no_cv,] #Error of all Trees fitted
# cat(mtry," ") #printing the output to the console
}
# Find which mtry produced lowest pred. error in test set
mintest_OOB_cv <- which(oob.err_cv[,"OOB"]==min(oob.err_cv[,"OOB"]))
# Run final RF on test set
CV_rf_test <- randomForest(Groups_2~., data=dataset_test_2_SMOTE,
ntree=stable_tree_no_cv, mtry=mintest_OOB_cv)
# Plot ROC curve with AUC
pred_probs_rf <- predict(CV_rf_test,dataset_valid_2, type="prob")
RF_Group_2_ALLQs_ROC_CV[[fold_num*(i-1)+j]] <- roc(response=dataset_valid_2$Groups_2,
predictor=pred_probs_rf[,2])
# Get confusion matrix of best mtry at best threshold
best_rf_thres <- coords(RF_Group_2_ALLQs_ROC_CV[[fold_num*(i-1)+j]],
x="best", ret="threshold",
best.method = "closest.topleft")
RF_Group2_ALLQs_pred <- factor(ifelse(pred_probs_rf[,2]>
rep(best_rf_thres[1],
length(pred_probs_rf[,2])),
"HR_ASD", "HR_Neg"))
RF_confmatrix_CV[[fold_num*(i-1)+j]] <- confusionMatrix(data=RF_Group2_ALLQs_pred,
reference=dataset_valid_2$Groups_2,
positive="HR_ASD")
confusionMatrix(data=RF_Group2_ALLQs_pred,
reference=dataset_valid_2$Groups_2,
positive="HR_ASD")
pred_probs_rf
predict(CV_rf_test,dataset_test_2_SMOTE, type="prob")
CV_rf_test$votes
CV_rf_test$votes
predict(CV_rf_test,dataset_test_2_SMOTE)
predict(CV_rf_test,dataset_test_2_SMOTE, type="prob")
CV_rf_test$votes
